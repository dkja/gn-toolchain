template("gcc_like_toolchain")
{
    toolchain(target_name)
    {
        ar = invoker.ar
        cc = invoker.cc
        cxx = invoker.cxx

        tool("cc") 
        {
            depfile = "{{output}}.d"
            command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs = [
              "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
            ]
            description = "CC {{source}}"
        }

        tool("cxx") 
        {
            depfile = "{{output}}.d"
            command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
            depsformat = "gcc"
            outputs = [
                "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
            ]
            description = "CXX {{source}}"
        }

        tool("alink") 
        {
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$ar {{output}} $rspfile"
            outputs = [
                "{{root_out_dir}}/{{target_output_name}}{{output_extension}}",
            ]
            default_output_extension = ".a"
            output_prefix = "lib"
            description = "ALINK {{output}}"
        }

        tool("solink") 
        {
            soname = "{{target_output_name}}{{output_extension}}"

            rpath = "-Wl,-soname,$soname"

            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"
            command = "$cxx -shared {{ldflags}} @$rspfile {{solibs}} {{libs}} $rpath -o {{output}}"
            outputs = [
                "{{root_out_dir}}/$soname",
            ]
            output_prefix = "lib"
            default_output_extension = ".so"
            description = "SOLINK {{output}}"
        }

        tool("link") {
            rspfile = "{{output}}.rsp"
            rspfile_content = "{{inputs}}"

            # --start-group/--end-group let us link multiple .a {{inputs}}
            # without worrying about their relative order on the link line.
            #
            # This is mostly important for traditional linkers like GNU ld and Gold.
            # LLD doesn't need these flags, but accepts and ignores them.
            _start_group = "-Wl,--start-group"
            _end_group = "-Wl,--end-group"

            command = "$cxx {{ldflags}} $_start_group @$rspfile {{solibs}} $_end_group {{libs}} -o {{output}}"
            outputs = [
                "{{root_out_dir}}/{{target_output_name}}{{output_extension}}",
            ]
            description = "LINK {{output}}"
        }

    }
}

gcc_like_toolchain("gcc")
{
    cc = "gcc"
    cxx = "g++"
    ar = "ar"
}

gcc_like_toolchain("clang")
{
    cc = "clang"
    cxx = "clang++"
    ar = "ar"
}